#Implementation of Graph Depth First Search Algorithm
#This code creates a graph and performs a Depth-First Search (DFS) starting from vertex 2. 
#The Graph class contains methods to add edges to the graph and to perform DFS. 
#The DFS method is recursive and visits each vertex only once.
# Importing defaultdict from collections module
#Code obtained from: https://www.scholarhat.com/tutorial/datastructures/graph-in-data-structures

from collections import defaultdict

# Defining the Graph class
class Graph:
    # Constructor for the Graph class
    def __init__(self, vertices):
        # Number of vertices in the graph
        self.vertices = vertices
        # Default dictionary to store adjacency lists of the graph
        self.adjLists = defaultdict(list)
        # List to keep track of visited vertices
        self.visited = [False] * vertices

    # Method to add an edge to the graph
    def addEdge(self, src, dest):
        # Appending the destination vertex to the source vertex's adjacency list
        self.adjLists[src].append(dest)

    # Method to perform Depth-First Search (DFS)
    def DFS(self, vertex):
        # Marking the vertex as visited
        self.visited[vertex] = True
        # Printing the visited vertex
        print(vertex, end=" ")

        # Recursively visiting all the vertices adjacent to the current vertex
        for adj in self.adjLists[vertex]:
            if not self.visited[adj]:
                self.DFS(adj)

# Creating a graph
g = Graph(7)
# Adding edges to the graph
g.addEdge(0, 7)
g.addEdge(0, 2)
g.addEdge(1, 3)
g.addEdge(1, 4)
g.addEdge(2, 5)
g.addEdge(2, 1)
g.addEdge(3, 6)

# Printing the Depth-First Traversal starting from vertex 2
print("Following is Depth First Traversal (starting from vertex 2):")
g.DFS(2)
