#SCC with visualisation
# Import necessary libraries
import networkx as nx
import matplotlib.pyplot as plt

class GFG:
    # dfs Function to reach destination
    def dfs(self, curr, des, adj, vis):
        if curr == des:
            return True
        vis[curr] = 1
        for x in adj[curr]:
            if not vis[x]:
                if self.dfs(x, des, adj, vis):
                    return True
        return False

    # To tell whether there is a path from source to destination
    def isPath(self, src, des, adj):
        vis = [0] * (len(adj) + 1)
        return self.dfs(src, des, adj, vis)

    # Function to return all the strongly connected components of a graph.
    def findSCC(self, n, a):
        ans = []
        is_scc = [0] * (n + 1)
        adj = [[] for _ in range(n + 1)]
        for i in range(len(a)):
            adj[a[i][0]].append(a[i][1])
        for i in range(1, n + 1):
            if not is_scc[i]:
                scc = [i]
                for j in range(i + 1, n + 1):
                    if not is_scc[j] and self.isPath(i, j, adj) and self.isPath(j, i, adj):
                        is_scc[j] = 1
                        scc.append(j)
                ans.append(scc)
        return ans

# Driver Code Starts
if __name__ == "__main__":
    obj = GFG()
    V = 5
    edges = [
        [1, 3], [1, 4], [2, 1], [3, 2], [4, 5]
    ]
    ans = obj.findSCC(V, edges)
    print("Strongly Connected Components are:")
    for x in ans:
        for y in x:
            print(y, end=" ")
        print()

    # Create a directed graph
    G = nx.DiGraph()

    # Add nodes and edges to the graph based on your SCCs
    for scc in ans:
        G.add_nodes_from(scc)
        G.add_edges_from([(scc[i], scc[i+1]) for i in range(len(scc)-1)])

    # Draw the graph
    nx.draw(G, with_labels=True)
    plt.show()
